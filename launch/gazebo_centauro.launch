<launch>

  <!-- basic set-up which progrmas should run -->
  <arg name="gazebo" default="true"/>
  <arg name="rviz" default="false"/>

  <!-- which inertia parameters should be loaded -->
  <arg name="inertia_param" default="original"/>
  <arg name="kinematic_param" default="original"/>
  <arg name="limits" default="default"/>

  <!-- gazebo configuration parameters -->
  <arg name="paused" default="true"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="physics" default="ode"/>
  <arg name="verbose" default="false"/>
  <arg name="extra_gazebo_args" default=""/>

  <!-- choose between "xbotcore" and "ros_control" control plugin -->
  <arg name="middleware" default="ros_control"/>

  <!-- centauro model configuration parameters -->
  <!-- centauro modules -->
  <arg name="arms" default="true"/>
  <arg name="torso" default="true"/>
  <arg name="legs" default="true"/>
  <arg name="head" default="true"/>
  <arg name="wheels" default="false"/>
  <arg name="static" default="false"/>

  <!-- choose the end-effector -->
  <arg name="left_end_effector" default="heri"/>
  <arg name="right_end_effector" default="heri"/>
  <arg name="mass" default="0.0"/>

  <!-- actuators set-up-->
  <arg name="torso_actuators" default="true"/>
  <arg name="arm_actuators" default="true"/>
  <arg name="leg_actuators" default="true"/>
  <arg name="wheels_actuators" default="true"/>
  <arg name="head_actuators" default="true"/>

  <!-- sensors set-up-->
  <arg name="arm_sensors" default="true"/>
  <arg name="leg_sensors" default="true"/>
  <arg name="ft_sensors" default="true"/>
  <arg name="bumbers" default="true"/>
  <arg name="imu" default="true"/>
  <arg name="kinect" default="true"/>
  <arg name="velodyne" default="true"/>

  <!-- which collision model should run:
       WARNING: exactly one parameter has to be true, otherwise simulation behaviour is undefined -->
  <arg name="collision_model" default="primitives"/>

  <!-- whether the mesh files should be loaded for visualization -->
  <arg name="visual_model" default="simplified"/>

  <!-- from where the simulation enviornment will be loaded:
       WARNING: exactly one parameter has to be true, otherwise simulation behaviour is undefined -->
  <arg name="world_name" default="$(find centauro_gazebo)/worlds/centauro.world"/>


  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!-- Internal arguments, rewrite human-readable gazebo arguments to it's internal arguments -->
  <arg unless="$(arg paused)" name="command_arg1" value=""/>
  <arg     if="$(arg paused)" name="command_arg1" value="-u"/>
  <arg unless="$(arg headless)" name="command_arg2" value=""/>
  <arg     if="$(arg headless)" name="command_arg2" value="-r"/>
  <arg unless="$(arg verbose)" name="command_arg3" value=""/>
  <arg     if="$(arg verbose)" name="command_arg3" value="--verbose"/>
  <arg unless="$(arg debug)" name="script_type" value="gzserver"/>
  <arg     if="$(arg debug)" name="script_type" value="debug"/>

  <!-- Load the URDF/SRDF into the ROS Parameter Server -->
  <param name="robot_description"
         command="$(find xacro)/xacro --inorder '$(find centauro)/centauro_urdf/urdf/centauro.urdf.xacro'
                   GAZEBO:=$(arg gazebo)                        MIDDLEWARE:=$(arg middleware)
                   STATIC:=$(arg static)                        LEFT_END_EFFECTOR:=$(arg left_end_effector)     RIGHT_END_EFFECTOR:=$(arg right_end_effector)   MASS:=$(arg mass)
                   ARMS:=$(arg arms)                            LEGS:=$(arg legs)                               TORSO:=$(arg torso)                             WHEELS:=$(arg wheels)                           HEAD:=$(arg head)
                   ARM_ACTUATORS:=$(arg arm_actuators)          LEG_ACTUATORS:=$(arg leg_actuators)             TORSO_ACTUATORS:=$(arg torso_actuators)         WHEELS_ACTUATORS:=$(arg wheels_actuators)       HEAD_ACTUATORS:=$(arg head_actuators)
                   ARM_SENSORS:=$(arg arm_sensors)              LEG_SENSORS:=$(arg leg_sensors)                 VELODYNE:=$(arg velodyne)
                   FT_SENSORS:=$(arg ft_sensors)                BUMBERS:=$(arg bumbers)                         IMU:=$(arg imu)                                 KINECT:=$(arg kinect)
                   VISUAL_MODEL:=$(arg visual_model)            COLLISION_MODEL:=$(arg collision_model) 
                   INERTIA_PARAM:=$(arg inertia_param)          KINEMATIC_PARAM:=$(arg kinematic_param)         LIMITS:=$(arg limits)
        "/>

 <!-- run gazebo -->
  <group if="$(arg gazebo)">

  	<!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
	<node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
		args="-urdf -model centauro -param robot_description"/>

       <!-- <rosparam file="$(find centauro_gazebo)/config/centauro_control_joint_state_publisher.yaml" command="load"/> -->

       <!-- <rosparam command="load" file="/home/user/tf_urdf_tutorial/src/src/urdf_sim_tutorial/config/centauro_ctrl_joint.yaml"/> -->

  	 <!-- <node name="centauro_controller_spawner" pkg="controller_manager" type="spawner" -->
          <!--  args="centauro_controller"/> -->

        <!--<node name="joint_state_spawner" pkg="controller_manager" type="spawner"-->
        <!--   respawn="false" output="screen" ns="/centauro" -->
         <!--  args="joint_state_controller"> -->
               <!--  centauro_controller"> -->
	<!-- </node> -->
	    <!-- Start the GUI that lets the user control the states of the individual
	    joints of the robot. -->
	    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
		<param name="use_gui" value="true"/>
	    </node>


        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
        <!--   <remap from="/joint_states" to="/centauro/joint_states" /> -->
	   <param name="publish_frequency" type="double" value="250.0"/>
        </node>

  </group>

  <!-- run rviz -->
  <group if="$(arg rviz)">
	<group unless="$(arg gazebo)">
		<node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
			<param name="publish_frequency" type="double" value="250.0"/>
		</node>

		<node pkg="joint_state_publisher" type="joint_state_publisher" name="joint_state_publisher">
			<param name="use_gui" value="$(arg gui)" unless="$(arg gazebo)"/>
		</node>
	</group>

	<node pkg="rviz" type="rviz" name="rviz"/>

  </group>


</launch>
